//#ifdef _CH_
//#pragma package <opencv>
//#endif
//#include <math.h>
#include <cv.h>
#include <highgui.h>
#include <cvaux.h>
#include<iostream>
#include <stdio.h>
#include <time.h>
#include<fstream>
#include<stdlib.h>
//#include<FSTREAM.H>
#include<string.h>


//#include <iostream.h>
/*#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

*/

const char *displaywindow="Vision Based Text Recognition";
const char *window1="binary image";
IplImage* imagen;
IplImage* imagen_color;
IplImage* smooth;
IplImage* thresh;
IplImage* open_morf;
IplImage* blobResult;
IplImage* img_contornos;
CvSeq* contour;
CvSeq* contourLow;
CvMoments momentrr;
CvHuMoments humoments;
IplImage *resized;
IplImage *zone[16];

using namespace cv;
using namespace std;



int whitePixels = 0,zone_val[16];
char c;
const int f1=100;
float variance[40];
float dist[8]={25,26,35,36,2,26,57,44};
const char *fileNames[]={"D:/0.txt",
"D:/1.txt",
"D:/2.txt",
"D:/3.txt",
"D:/4.txt",
"D:/5.txt",
"D:/6.txt",
"D:/7.txt",
"D:/8.txt",
"D:/9.txt",
"D:/a.txt",
"D:/b.txt",
"D:/c.txt",
"D:/d.txt",
"D:/e.txt",
"D:/f.txt",
"D:/g.txt",
"D:/h.txt",
"D:/i.txt",
"D:/j.txt",
"D:/k.txt",
"D:/l.txt",
"D:/m.txt",
"D:/n.txt",
"D:/o.txt",
"D:/p.txt",
"D:/q.txt",
"D:/r.txt",
"D:/s.txt",
"D:/t.txt",
"D:/u.txt",
"D:/v.txt",
"D:/w.txt",
"D:/x.txt",
"D:/y.txt",
"D:/z.txt",
"D:/aa.txt",
"D:/bb.txt",
"D:/cc.txt",
"D:/dd.txt",
"D:/ee.txt",
"D:/ff.txt",
"D:/gg.txt",
"D:/hh.txt",
"D:/ii.txt",
"D:/jj.txt",
"D:/kk.txt",
"D:/ll.txt",
"D:/mm.txt",
"D:/nn.txt",
"D:/oo.txt",
"D:/pp.txt",
"D:/qq.txt",
"D:/rr.txt",
"D:/ss.txt",
"D:/tt.txt",
"D:/uu.txt",
"D:/vv.txt",
"D:/ww.txt",
"D:/xx.txt",
"D:/yy.txt",
"D:/zz.txt"};
const char *video_files[]={"D:/samples/videos/0.avi",
"D:/samples/videos/1.avi",
"D:/samples/videos/2.avi",
"D:/samples/videos/3.avi",
"D:/samples/videos/4.avi",
"D:/samples/videos/5.avi",
"D:/samples/videos/6.avi",
"D:/samples/videos/7.avi",
"D:/samples/videos/8.avi",
"D:/samples/videos/9.avi",
"D:/samples/videos/a.avi",
"D:/samples/videos/b.avi",
"D:/samples/videos/c.avi",
"D:/samples/videos/d.avi",
"D:/samples/videos/e.avi",
"D:/samples/videos/f.avi",
"D:/samples/videos/g.avi",
"D:/samples/videos/h.avi",
"D:/samples/videos/i.avi",
"D:/samples/videos/j.avi",
"D:/samples/videos/k.avi",
"D:/samples/videos/l.avi",
"D:/samples/videos/m.avi",
"D:/samples/videos/n.avi",
"D:/samples/videos/o.avi",
"D:/samples/videos/p.avi",
"D:/samples/videos/q.avi",
"D:/samples/videos/r.avi",
"D:/samples/videos/s.avi",
"D:/samples/videos/t.avi",
"D:/samples/videos/u.avi",
"D:/samples/videos/v.avi",
"D:/samples/videos/w.avi",
"D:/samples/videos/x.avi",
"D:/samples/videos/y.avi",
"D:/samples/videos/z.avi",
"D:/samples/videos/aa.avi",
"D:/samples/videos/bb.avi",
"D:/samples/videos/cc.avi",
"D:/samples/videos/dd.avi",
"D:/samples/videos/ee.avi",
"D:/samples/videos/ff.avi",
"D:/samples/videos/gg.avi",
"D:/samples/videos/hh.avi",
"D:/samples/videos/ii.avi",
"D:/samples/videos/jj.avi",
"D:/samples/videos/kk.avi",
"D:/samples/videos/ll.avi",
"D:/samples/videos/mm.avi",
"D:/samples/videos/nn.avi",
"D:/samples/videos/oo.avi",
"D:/samples/videos/pp.avi",
"D:/samples/videos/qq.avi",
"D:/samples/videos/rr.avi",
"D:/samples/videos/ss.avi",
"D:/samples/videos/tt.avi",
"D:/samples/videos/uu.avi",
"D:/samples/videos/vv.avi",
"D:/samples/videos/ww.avi",
"D:/samples/videos/xx.avi",
"D:/samples/videos/yy.avi",
"D:/samples/videos/zz.avi"
};


float divid[8];
Mat binary;
Mat binary1;
FILE *file=fopen("E:/Downloads/Proj/training.txt","wb");
//fstream	file("E:/Downloads/Proj/training.txt",ios::out);


IplImage* crop( IplImage* src,  CvRect roi)
{
  // Must have dimensions of output image
	IplImage* cropped = cvCreateImage( cvSize(roi.width,roi.height), src->depth,src->nChannels);
  // Say what the source region is
  cvSetImageROI( src, roi );
  // Do the copy
  cvCopy( src, cropped );
  cvResetImageROI( src );
  cvNamedWindow( "check",WINDOW_AUTOSIZE);
  //cvShowImage( "check", cropped );
  
  return cropped;
}

IplImage* img_resize(IplImage* src_img, int new_width,int new_height)
{
    IplImage* des_img;
    des_img=cvCreateImage(cvSize(new_width,new_height),src_img->depth,src_img->nChannels);
    cvResize(src_img,des_img,CV_INTER_LINEAR);
    return des_img;
} 

void zoneextraction(IplImage* imagen_color,int &videocount)
{
                  
                //load image  in gray level
                //imagen=cvLoadImage("D:/a/n.jpg",0);  //if 0 is given image read is grayscale
                //load image in RGB
                //imagen_color=cvLoadImage("D:/a/n.jpg",1);
	 imagen=cvCreateImage(cvSize(imagen_color->width, imagen_color->height), IPL_DEPTH_8U, 1);
			
			cvCvtColor(imagen_color,imagen,CV_RGB2GRAY);

			smooth= cvCreateImage(cvSize(imagen->width, imagen->height), IPL_DEPTH_8U, 1);
			thresh= cvCreateImage(cvSize(imagen->width, imagen->height), IPL_DEPTH_8U, 1);
			open_morf= cvCreateImage(cvSize(imagen->width, imagen->height), IPL_DEPTH_8U, 1);
	
        //Init variables for contours
        contour = 0;
        contourLow = 0;
        //Create storage needed for contour detection
        CvMemStorage* storage = cvCreateMemStorage(0);

        //Create window
        cvNamedWindow( displaywindow, 0 );

		//cvNamedWindow(window1,1);
        //Smooth image
        cvSmooth(imagen, smooth, CV_GAUSSIAN, 3,3);  
		//Here the smooth type is gaussian and kernel size is 3x3..the gaussian kernel gives more importance to middle elements
        
        CvScalar avg;
        CvScalar avgStd;
        cvAvgSdv(smooth, &avg, &avgStd, NULL);
       // printf("Avg: %f\nStd: %f\n", avg.val[0], avgStd.val[0]);
		//cvEqualizeHist(smooth,smooth);
        //threshold image
        cvThreshold(smooth, thresh, (int)avg.val[0]-7*(int)(avgStd.val[0]/8), 255, CV_THRESH_BINARY_INV);
		//Morphological filters
        cvErode(thresh, open_morf, NULL,0); 
        cvDilate(open_morf, open_morf, NULL,0); 
        
		img_contornos=cvCloneImage(open_morf);
		
		binary1=Mat(thresh,true);
	    
       //Search countours in preprocesed image
        cvFindContours( img_contornos, storage, &contour, sizeof(CvContour),              //page 262 oreilly
                        CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE, cvPoint(0, 0) );
        //Optimize contours, reduce points
        contourLow=cvApproxPoly(contour, sizeof(CvContour), storage,CV_POLY_APPROX_DP,1,1);
        int count=0;
		CvPoint *pt[3];
		
		CvPoint c,a,b,d,e,f,g,p11,p21,p31,p41,p51,p61,p71,p81;
        
        //For each contour found
		//printf("CONTOUR TOTAL:%d\n",contourLow->elem_size);
		
        for(; contourLow != 0; contourLow = contourLow->h_next )
        {
                CvScalar color = CV_RGB( rand()&200, rand()&200, rand()&200 );
                //We can draw the contour of object
                //cvDrawContours( imagen_color, contourLow, color, color, -1, 0, 8, cvPoint(0,0) );
                //Or detect bounding rect of contour        
                CvRect rect;
                CvPoint pt1, pt2;
                rect=cvBoundingRect(contourLow, NULL);
				    pt1.x = rect.x;
                    pt2.x = (rect.x+rect.width);
                    pt1.y = rect.y;
                    pt2.y = (rect.y+rect.height);
					cvRectangle(imagen_color, pt1,pt2, color, 1); 

					c.x=pt1.x+(rect.width/2);c.y=pt1.y+(rect.height/2);
					a.x=pt2.x;a.y=pt1.y;
				b.x=pt1.x;b.y=pt2.y;
				d.x=c.x;d.y=pt1.y;
				e.x=pt1.x;e.y=c.y;
				f.x=c.x;f.y=pt2.y;
				g.x=pt2.x;g.y=c.y;


				p11.x=pt1.x;p11.y=pt1.y+(rect.height/4);
				p21.x=pt1.x;p21.y=pt1.y+(3*(rect.height)/4);
				p31.x=pt2.x;p31.y=pt1.y+(rect.height/4);
				p41.x=pt2.x;p41.y=pt1.y+(3*(rect.height)/4);
				p51.x=pt1.x+(rect.width/4);     p51.y=pt1.y;
				p61.x=pt1.x+(3*(rect.width/4)); p61.y=pt1.y;
				p71.x=pt1.x+(rect.width/4);     p71.y=pt2.y;
				p81.x=pt1.x+(3*(rect.width/4)); p81.y=pt2.y;

				int dis1=0,dis2=0,dis3=0,dis4=0,dis5=0,dis6=0,dis7=0,dis8=0,dis9=0,dis10=0,dis11=0,dis12=0,dis13=0,dis14=0,dis15=0,dis16=0;

				for (int p1=e.x;p1<c.x;p1++)
						{
						    if(binary1.at<uchar>(e.y,p1)==255)
							{
								e.x=p1;								
								dis1=c.x-p1;
								cvLine(imagen_color,c,e,color,1,8);
								/*printf("val:%d\t",(binary.at<uchar>(e.y,p1)));
								printf("distance 1:%d\t",dis1);
								printf("x:%d\t",e.x);
								printf("y:%d\t",e.y);
								printf("\n");*/
								break;
							}													
						}
						
						for (int p2=g.x;p2>c.x;p2--)
						{
						    if(binary1.at<uchar>(e.y,p2)==255)
							{
													
								g.x=p2;								
								dis2=g.x-c.x;
								cvLine(imagen_color,c,g,color,1,8);
								/*printf("val:%d\t",(binary.at<uchar>(e.y,p2)));
								printf("distance 2:%d\t",dis2);
								printf("x:%d\t",p2);
								printf("y:%d\t",e.y);
								printf("\n");*/
								break;
							}													
						}

						for (int p3=d.y;p3<c.y;p3++)
						{
						    if(binary1.at<uchar>(p3,d.x)==255)
							{
													
								d.y=p3;								
								dis3=c.y-d.y;
								cvLine(imagen_color,c,d,color,1,8);
								/*printf("val:%d\t",(binary.at<uchar>(p3,d.x)));
								printf("distance 3:%d\t",dis3);
								printf("x:%d\t",d.x);
								printf("y:%d\t",d.y);
								printf("\n");*/
								break;
							}													
						}

						for (int p4=f.y;p4>c.y;p4--)
						{
						    if(binary1.at<uchar>(p4,f.x)==255)
							{
													
								f.y=p4;								
								dis4=f.y-c.y;
								cvLine(imagen_color,c,f,color,1,8);
								/*printf("val:%d\t",(binary.at<uchar>(p4,f.x)));
								printf("distance 4:%d\t",dis4);
								printf("x:%d\t",f.x);
								printf("y:%d\t",f.y);
								printf("\n");*/
								break;
							}													
						}
						
		//diagonals
						for (int d1=pt1.x,d2=pt1.y;d1<c.x,d2<c.y;d1++,d2++)
						{
						    if(binary1.at<uchar>(d2,d1)==255)
							{
								CvPoint n;					
								n.x=d1;
								n.y=d2;
								dis5=sqrt(((c.x-n.x)*(c.x-n.x))+((c.y-n.y)*(c.y-n.y)));
								cvLine(imagen_color,c,n,color,1,8);
								/*printf("val:%d\t",(binary.at<uchar>(d2,d1)));
								printf("distance 5:%d\t",dis5);
								printf("x:%d\t",d1);
								printf("y:%d\t",d2);
								printf("\n");*/
								break;
							}													
						}

						for (int d3=pt2.x,d4=pt1.y;d3>c.x,d4<c.y;d3--,d4++)
						{
						    if(binary1.at<uchar>(d4,d3)==255)
							{
								CvPoint n;					
								n.x=d3;
								n.y=d4;					
								dis6=sqrt(((d3-c.x)*(d3-c.x))+((d4-pt1.y)*(d4-pt1.y)));
								cvLine(imagen_color,c,n,color,1,8);
								/*printf("val:%d\t",(binary.at<uchar>(d4,d3)));
								printf("distance 6:%d\t",dis6);
								printf("x:%d\t",d4);
								printf("y:%d\t",d3);
								printf("\n");*/
								break;
							}													
						}

						for (int d5=pt1.x,d6=pt2.y;d5<c.x,d6>c.y;d5++,d6--)
						{
						    if(binary1.at<uchar>(d6,d5)==255)
							{
													
								CvPoint n;					
								n.x=d5;
								n.y=d6;
								dis7=sqrt(((c.x-d5)*(c.x-d5))+((d6-c.y)*(d6-c.y)));
								cvLine(imagen_color,c,n,color,1,8);
								/*printf("val:%d\t",(binary.at<uchar>(d6,d5)));
								printf("distance 7:%d\t",dis7);
								printf("x:%d\t",d5);
								printf("y:%d\t",d6);
								printf("\n");*/
								break;
							}													
						}

						for (int d7=pt2.x,d8=pt2.y;d7>c.x,d8>c.y;d7--,d8--)
						{
						    if(binary1.at<uchar>(d8,d7)==255)
							{
													
								CvPoint n;					
								n.x=d7;
								n.y=d8;
								dis8=sqrt(((d7-c.x)*(d7-c.x))+((d8-c.y)*(d8-c.y)));
								cvLine(imagen_color,c,n,color,1,8);
								/*printf("val:%d\t",(binary.at<uchar>(d8,d7)));
								printf("distance 8:%d\t",dis8);
								printf("x:%d\t",d7);
								printf("y:%d\t",d8);
								printf("\n");*/
								break;
							}													
						}

						for (int p9=p11.x;p9<p31.x;p9++)
						{
						    if(binary1.at<uchar>(p11.y,p9)==255)
							{
								CvPoint p12;
								p12.x=p9;
								p12.y=p11.y;
								dis9=sqrt(((c.x-p12.x)*(c.x-p12.x))+((c.y-p12.y)*(c.y-p12.y)));
								//cvLine(imagen_color,c,p12,color,1,8);
								break;
							}													
						}

					for (int p10=p21.x;p10<p41.x;p10++)
						{
						    if(binary1.at<uchar>(p21.y,p10)==255)
							{
								CvPoint p22;
								p22.x=p10;
								p22.y=p21.y;
								dis10=sqrt(((c.x-p22.x)*(c.x-p22.x))+((p22.y-c.y)*(p22.y-c.y)));
								//cvLine(imagen_color,c,p22,color,1,8);
								break;
							}													
						}

						for (int p111=p31.x;p111>p11.x;p111--)
						{
						    if(binary1.at<uchar>(p31.y,p111)==255)
							{
								CvPoint p32;
								p32.x=p111;
								p32.y=p31.y;
								dis11=sqrt(((p32.x-c.x)*(p32.x-c.x))+((c.y-p32.y)*(c.y-p32.y)));
								//cvLine(imagen_color,c,p32,color,1,8);
								break;
							}													
						}

							for (int p12=p41.x;p12>p21.x;p12--)
						{
						    if(binary1.at<uchar>(p41.y,p12)==255)
							{
								CvPoint p42;
								p42.x=p12;
								p42.y=p41.y;
								dis12=sqrt(((p42.x-c.x)*(p42.x-c.x))+((p42.y-c.y)*(p42.y-c.y)));
								//cvLine(imagen_color,c,p42,color,1,8);
								break;
							}													
						}

								for (int p13=p51.y;p13<p71.y;p13++)
						{
						    if(binary1.at<uchar>(p13,p51.x)==255)
							{
								CvPoint p52;
								p52.x=p51.x;
								p52.y=p13;
								dis13=sqrt(((c.x-p52.x)*(c.x-p52.x))+((c.y-p52.y)*(c.y-p52.y)));
								cvLine(imagen_color,c,p52,color,1,8);
								break;
							}													
						}

					for (int p14=p61.y;p14<p81.y;p14++)
						{
						    if(binary1.at<uchar>(p14,p61.x)==255)
							{
								CvPoint p62;
								p62.x=p61.x;
								p62.y=p14;
								dis14=sqrt(((p62.x-c.x)*(p62.x-c.x))+((c.y-p62.y)*(c.y-p62.y)));
								cvLine(imagen_color,c,p62,color,1,8);
								break;
							}													
						}

						for (int p15=p71.y;p15>p51.y;p15--)
						{
						    if(binary1.at<uchar>(p15,p71.x)==255)
							{
								CvPoint p72;
								p72.x=p71.x;
								p72.y=p15;
								dis15=sqrt(((c.x-p72.x)*(c.x-p72.x))+((p72.y-c.y)*(p72.y-c.y)));
								cvLine(imagen_color,c,p72,color,1,8);
								break;
							}													
						}

					for (int p16=p81.y;p16>p61.y;p16--)
						{
						    if(binary1.at<uchar>(p16,p81.x)==255)
							{
								CvPoint p82;
								p82.x=p81.x;
								p82.y=p16;
								dis16=sqrt(((p82.x-c.x)*(p82.x-c.x))+((p82.y-c.y)*(p82.y-c.y)));
								cvLine(imagen_color,c,p82,color,1,8);
								break;
							}													
						}
					
					IplImage* cropp = crop(open_morf, cvRect( pt1.x,pt1.y,rect.width,rect.height ));
					resized=img_resize(cropp,128,128);
        
					binary=Mat(resized,true);
					int tot=countNonZero(binary);
					//printf("TOTAL BLaCK %d\n",tot);
					zone[0] = crop(resized, cvRect( 0,0,32,32 ));
					zone[1] = crop(resized, cvRect( 32,0,32,32 ));
					zone[2] = crop(resized, cvRect( 64,0,32,32 ));
					zone[3] = crop(resized, cvRect( 96,0,32,32 ));
					
					zone[4] = crop(resized, cvRect( 0,32,32,32 ));
					zone[5] = crop(resized, cvRect( 32,32,32,32 ));
					zone[6] = crop(resized, cvRect( 64,32,32,32 ));
					zone[7] = crop(resized, cvRect( 96,32,32,32 ));

					zone[8] = crop(resized, cvRect( 0,64,32,32 ));
					zone[9] = crop(resized, cvRect( 32,64,32,32 ));
					zone[10] = crop(resized, cvRect( 64,64,32,32 ));
					zone[11] = crop(resized, cvRect( 96,64,32,32 ));

					zone[12] = crop(resized, cvRect( 0,96,32,32 ));
					zone[13] = crop(resized, cvRect( 32,96,32,32 ));
					zone[14] = crop(resized, cvRect( 64,96,32,32 ));
					zone[15] = crop(resized, cvRect( 96,96,32,32 ));
					for (int k=0;k<16;k++)
					{
						binary=Mat(zone[k],true);
						zone_val[k]=countNonZero(binary);
						//printf("\nZONE%d \t %d",k,zone_val[k]);
					}
					
					std::ofstream outfile;	

						
					outfile.open(fileNames[videocount], std::ios_base::app);
					outfile << zone_val[0] <<" "<<zone_val[1]<<" "<< zone_val[2]<<" "<<zone_val[3] <<" "<< zone_val[4] <<" "<<zone_val[5]<<" "<< zone_val[6] <<" "<<zone_val[7]<<" "<< zone_val[8] <<" "<<zone_val[9]<<" "<< zone_val[10] <<" "<<zone_val[11]<<" "<< zone_val[12] <<" "<<zone_val[13]<<" "<< zone_val[14] <<" "<<zone_val[15]<<" "<< dis1 <<" "<<dis2 <<" "<< dis3 <<" "<<dis4 <<" "<< dis5 <<" "<<dis6<<" "<< dis7 <<" "<<dis8<<" "<< dis9 <<" "<<dis10<<" "<< dis11 <<" "<<dis12<<" "<< dis13 <<" "<<dis14<<" "<< dis15 <<" "<<dis16<<"\n";
					//cvSaveImage ("style.jpg" ,resized);
								   
}
	cvShowImage(displaywindow, imagen_color);
		//file.close();

}
//void featureextraction(IplImage* imagen_color,int &videocount)
//{
//                  
//                //load image  in gray level
//               // imagen=cvLoadImage("D:/a/1.png",0);  //if 0 is given image read is grayscale
//                //load image in RGB
//                //imagen_color=cvLoadImage("D:/a/1.png",1);
//            imagen=cvCreateImage(cvSize(imagen_color->width, imagen_color->height), IPL_DEPTH_8U, 1);
//			
//			cvCvtColor(imagen_color,imagen,CV_RGB2GRAY);
//
//			smooth= cvCreateImage(cvSize(imagen->width, imagen->height), IPL_DEPTH_8U, 1);
//			thresh= cvCreateImage(cvSize(imagen->width, imagen->height), IPL_DEPTH_8U, 1);
//			open_morf= cvCreateImage(cvSize(imagen->width, imagen->height), IPL_DEPTH_8U, 1);
//	
//        //Init variables for contours
//        contour = 0;
//        contourLow = 0;
//        //Create storage needed for contour detection
//        CvMemStorage* storage = cvCreateMemStorage(0);
//
//        //Create window
//        cvNamedWindow( displaywindow, 0 );
//
//		//cvNamedWindow(window1,1);
//        //Smooth image
//        cvSmooth(imagen, smooth, CV_GAUSSIAN, 3,3);  
//		//Here the smooth type is gaussian and kernel size is 3x3..the gaussian kernel gives more importance to middle elements
//        
//        CvScalar avg;
//        CvScalar avgStd;
//        cvAvgSdv(smooth, &avg, &avgStd, NULL);
//        printf("Avg: %f\nStd: %f\n", avg.val[0], avgStd.val[0]);
//		//cvEqualizeHist(smooth,smooth);
//        //threshold image
//        cvThreshold(smooth, thresh, (int)avg.val[0]-7*(int)(avgStd.val[0]/8), 255, CV_THRESH_BINARY_INV);
//		//Morphological filters
//        cvErode(thresh, open_morf, NULL,0); 
//        cvDilate(open_morf, open_morf, NULL,0); 
//        
//		img_contornos=cvCloneImage(open_morf);
//		
//		binary=Mat(thresh,true);
//	    
//       //Search countours in preprocesed image
//        cvFindContours( img_contornos, storage, &contour, sizeof(CvContour),              //page 262 oreilly
//                        CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE, cvPoint(0, 0) );
//        //Optimize contours, reduce points
//        contourLow=cvApproxPoly(contour, sizeof(CvContour), storage,CV_POLY_APPROX_DP,1,1);
//        int count=0;
//		CvPoint *pt[3];
//		/*for (int i=0;i<=3;i++)
//		{
//			pt[i]=(CvPoint*)cvGetSeqElem(contourLow,i);
//			int posx=pt[i]->x;
//			int posy=pt[i]->y;
//			count=count+1;
//			printf("\n%d %d\n",posx,count);
//			printf("\n%d %d\n",posy,contourLow->total);
//			//printf("\n\n%d\n\n",binary.at<uchar>(650,350));
//			
//		}*/
//		
//		CvPoint c,a,b,d,e,f,g,p11,p21,p31,p41,p51,p61,p71,p81;
//        
//        //For each contour found
//		printf("CONTOUR TOTAL:%d\n",contourLow->elem_size);
//		
//        for(int textfile=0 ; contourLow != 0; contourLow = contourLow->h_next,textfile )
//        {
//                CvScalar color = CV_RGB( rand()&200, rand()&200, rand()&200 );
//                //We can draw the contour of object
//                //cvDrawContours( imagen_color, contourLow, color, color, -1, 0, 8, cvPoint(0,0) );
//                //Or detect bounding rect of contour        
//                CvRect rect;
//                CvPoint pt1, pt2;
//                rect=cvBoundingRect(contourLow, NULL);
//				    pt1.x = rect.x;
//                    pt2.x = (rect.x+rect.width);
//                    pt1.y = rect.y;
//                    pt2.y = (rect.y+rect.height);
//					cvRectangle(imagen_color, pt1,pt2, color, 1); 
//                
//
//				printf("\nRect pt1 x:%d\n",pt1.x);
//				printf("\nRect pt1 y:%d\n",pt1.y);
//				printf("\nRect pt2 x:%d\n",pt2.x);
//				printf("\nRect pt2 y:%d\n",pt2.y);
//				printf("\nRect width:%d\n",rect.width);
//				printf("\nRect height:%d\n",rect.height);
//
//				
//				c.x=pt1.x+(rect.width/2);c.y=pt1.y+(rect.height/2);
//				printf("\ncentre x:%d\n",c.x);
//				printf("\ncentre y:%d\n",c.y);
//
//				//to calculate distance from centre to end 
//				
//				a.x=pt2.x;a.y=pt1.y;
//				b.x=pt1.x;b.y=pt2.y;
//				d.x=c.x;d.y=pt1.y;
//				e.x=pt1.x;e.y=c.y;
//				f.x=c.x;f.y=pt2.y;
//				g.x=pt2.x;g.y=c.y;
//
//
//				p11.x=pt1.x;p11.y=pt1.y+(rect.height/4);
//				p21.x=pt1.x;p21.y=pt1.y+(3*(rect.height)/4);
//				p31.x=pt2.x;p31.y=pt1.y+(rect.height/4);
//				p41.x=pt2.x;p41.y=pt1.y+(3*(rect.height)/4);
//				p51.x=pt1.x+(rect.width/4);     p51.y=pt1.y;
//				p61.x=pt1.x+(3*(rect.width/4)); p61.y=pt1.y;
//				p71.x=pt1.x+(rect.width/4);     p71.y=pt2.y;
//				p81.x=pt1.x+(3*(rect.width/4)); p81.y=pt2.y;
//
//				//cvLine(imagen_color,c,p11,color,1,8);
//				//cvLine(imagen_color,c,p21,color,1,8);
//				//cvLine(imagen_color,c,p31,color,1,8);
//				//cvLine(imagen_color,c,p41,color,1,8);
//				//cvLine(imagen_color,c,p51,color,1,8);
//				//cvLine(imagen_color,c,p61,color,1,8);
//				//cvLine(imagen_color,c,p71,color,1,8);
//				//cvLine(imagen_color,c,p81,color,1,8);
//	
//
//				int dis1=0,dis2=0,dis3=0,dis4=0,dis5=0,dis6=0,dis7=0,dis8=0,dis9=0,dis10=0,dis11=0,dis12=0,dis13=0,dis14=0,dis15=0,dis16=0;
//	//check
//						
//				for (int p9=p11.x;p9<p31.x;p9++)
//						{
//						    if(binary.at<uchar>(p11.y,p9)==255)
//							{
//								CvPoint p12;
//								p12.x=p9;
//								p12.y=p11.y;
//								dis9=sqrt(((c.x-p12.x)*(c.x-p12.x))+((c.y-p12.y)*(c.y-p12.y)));
//								//cvLine(imagen_color,c,p12,color,1,8);
//								break;
//							}													
//						}
//
//					for (int p10=p21.x;p10<p41.x;p10++)
//						{
//						    if(binary.at<uchar>(p21.y,p10)==255)
//							{
//								CvPoint p22;
//								p22.x=p10;
//								p22.y=p21.y;
//								dis10=sqrt(((c.x-p22.x)*(c.x-p22.x))+((p22.y-c.y)*(p22.y-c.y)));
//								//cvLine(imagen_color,c,p22,color,1,8);
//								break;
//							}													
//						}
//
//						for (int p111=p31.x;p111>p11.x;p111--)
//						{
//						    if(binary.at<uchar>(p31.y,p111)==255)
//							{
//								CvPoint p32;
//								p32.x=p111;
//								p32.y=p31.y;
//								dis11=sqrt(((p32.x-c.x)*(p32.x-c.x))+((c.y-p32.y)*(c.y-p32.y)));
//								//cvLine(imagen_color,c,p32,color,1,8);
//								break;
//							}													
//						}
//
//							for (int p12=p41.x;p12>p21.x;p12--)
//						{
//						    if(binary.at<uchar>(p41.y,p12)==255)
//							{
//								CvPoint p42;
//								p42.x=p12;
//								p42.y=p41.y;
//								dis12=sqrt(((p42.x-c.x)*(p42.x-c.x))+((p42.y-c.y)*(p42.y-c.y)));
//								//cvLine(imagen_color,c,p42,color,1,8);
//								break;
//							}													
//						}
//
//								for (int p13=p51.y;p13<p71.y;p13++)
//						{
//						    if(binary.at<uchar>(p13,p51.x)==255)
//							{
//								CvPoint p52;
//								p52.x=p51.x;
//								p52.y=p13;
//								dis13=sqrt(((c.x-p52.x)*(c.x-p52.x))+((c.y-p52.y)*(c.y-p52.y)));
//								cvLine(imagen_color,c,p52,color,1,8);
//								break;
//							}													
//						}
//
//					for (int p14=p61.y;p14<p81.y;p14++)
//						{
//						    if(binary.at<uchar>(p14,p61.x)==255)
//							{
//								CvPoint p62;
//								p62.x=p61.x;
//								p62.y=p14;
//								dis14=sqrt(((p62.x-c.x)*(p62.x-c.x))+((c.y-p62.y)*(c.y-p62.y)));
//								cvLine(imagen_color,c,p62,color,1,8);
//								break;
//							}													
//						}
//
//						for (int p15=p71.y;p15>p51.y;p15--)
//						{
//						    if(binary.at<uchar>(p15,p71.x)==255)
//							{
//								CvPoint p72;
//								p72.x=p71.x;
//								p72.y=p15;
//								dis15=sqrt(((c.x-p72.x)*(c.x-p72.x))+((p72.y-c.y)*(p72.y-c.y)));
//								cvLine(imagen_color,c,p72,color,1,8);
//								break;
//							}													
//						}
//
//					for (int p16=p81.y;p16>p61.y;p16--)
//						{
//						    if(binary.at<uchar>(p16,p81.x)==255)
//							{
//								CvPoint p82;
//								p82.x=p81.x;
//								p82.y=p16;
//								dis16=sqrt(((p82.x-c.x)*(p82.x-c.x))+((p82.y-c.y)*(p82.y-c.y)));
//								cvLine(imagen_color,c,p82,color,1,8);
//								break;
//							}													
//						}
//
//
//
//
//
//						for (int p1=e.x;p1<c.x;p1++)
//						{
//						    if(binary.at<uchar>(e.y,p1)==255)
//							{
//								e.x=p1;								
//								dis1=c.x-p1;
//								cvLine(imagen_color,c,e,color,1,8);
//								/*printf("val:%d\t",(binary.at<uchar>(e.y,p1)));
//								printf("distance 1:%d\t",dis1);
//								printf("x:%d\t",e.x);
//								printf("y:%d\t",e.y);
//								printf("\n");*/
//								break;
//							}													
//						}
//						
//						for (int p2=g.x;p2>c.x;p2--)
//						{
//						    if(binary.at<uchar>(e.y,p2)==255)
//							{
//													
//								g.x=p2;								
//								dis2=g.x-c.x;
//								cvLine(imagen_color,c,g,color,1,8);
//								/*printf("val:%d\t",(binary.at<uchar>(e.y,p2)));
//								printf("distance 2:%d\t",dis2);
//								printf("x:%d\t",p2);
//								printf("y:%d\t",e.y);
//								printf("\n");*/
//								break;
//							}													
//						}
//
//						for (int p3=d.y;p3<c.y;p3++)
//						{
//						    if(binary.at<uchar>(p3,d.x)==255)
//							{
//													
//								d.y=p3;								
//								dis3=c.y-d.y;
//								cvLine(imagen_color,c,d,color,1,8);
//								/*printf("val:%d\t",(binary.at<uchar>(p3,d.x)));
//								printf("distance 3:%d\t",dis3);
//								printf("x:%d\t",d.x);
//								printf("y:%d\t",d.y);
//								printf("\n");*/
//								break;
//							}													
//						}
//
//						for (int p4=f.y;p4>c.y;p4--)
//						{
//						    if(binary.at<uchar>(p4,f.x)==255)
//							{
//													
//								f.y=p4;								
//								dis4=f.y-c.y;
//								cvLine(imagen_color,c,f,color,1,8);
//								/*printf("val:%d\t",(binary.at<uchar>(p4,f.x)));
//								printf("distance 4:%d\t",dis4);
//								printf("x:%d\t",f.x);
//								printf("y:%d\t",f.y);
//								printf("\n");*/
//								break;
//							}													
//						}
//						
//		//diagonals
//						for (int d1=pt1.x,d2=pt1.y;d1<c.x,d2<c.y;d1++,d2++)
//						{
//						    if(binary.at<uchar>(d2,d1)==255)
//							{
//								CvPoint n;					
//								n.x=d1;
//								n.y=d2;
//								dis5=sqrt(((c.x-n.x)*(c.x-n.x))+((c.y-n.y)*(c.y-n.y)));
//								cvLine(imagen_color,c,n,color,1,8);
//								/*printf("val:%d\t",(binary.at<uchar>(d2,d1)));
//								printf("distance 5:%d\t",dis5);
//								printf("x:%d\t",d1);
//								printf("y:%d\t",d2);
//								printf("\n");*/
//								break;
//							}													
//						}
//
//						for (int d3=pt2.x,d4=pt1.y;d3>c.x,d4<c.y;d3--,d4++)
//						{
//						    if(binary.at<uchar>(d4,d3)==255)
//							{
//								CvPoint n;					
//								n.x=d3;
//								n.y=d4;					
//								dis6=sqrt(((d3-c.x)*(d3-c.x))+((d4-pt1.y)*(d4-pt1.y)));
//								cvLine(imagen_color,c,n,color,1,8);
//								/*printf("val:%d\t",(binary.at<uchar>(d4,d3)));
//								printf("distance 6:%d\t",dis6);
//								printf("x:%d\t",d4);
//								printf("y:%d\t",d3);
//								printf("\n");*/
//								break;
//							}													
//						}
//
//						for (int d5=pt1.x,d6=pt2.y;d5<c.x,d6>c.y;d5++,d6--)
//						{
//						    if(binary.at<uchar>(d6,d5)==255)
//							{
//													
//								CvPoint n;					
//								n.x=d5;
//								n.y=d6;
//								dis7=sqrt(((c.x-d5)*(c.x-d5))+((d6-c.y)*(d6-c.y)));
//								cvLine(imagen_color,c,n,color,1,8);
//								/*printf("val:%d\t",(binary.at<uchar>(d6,d5)));
//								printf("distance 7:%d\t",dis7);
//								printf("x:%d\t",d5);
//								printf("y:%d\t",d6);
//								printf("\n");*/
//								break;
//							}													
//						}
//
//						for (int d7=pt2.x,d8=pt2.y;d7>c.x,d8>c.y;d7--,d8--)
//						{
//						    if(binary.at<uchar>(d8,d7)==255)
//							{
//													
//								CvPoint n;					
//								n.x=d7;
//								n.y=d8;
//								dis8=sqrt(((d7-c.x)*(d7-c.x))+((d8-c.y)*(d8-c.y)));
//								cvLine(imagen_color,c,n,color,1,8);
//								/*printf("val:%d\t",(binary.at<uchar>(d8,d7)));
//								printf("distance 8:%d\t",dis8);
//								printf("x:%d\t",d7);
//								printf("y:%d\t",d8);
//								printf("\n");*/
//								break;
//							}													
//						}
//						
//					
//
//						printf("distances:%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t\n",dis1,dis2,dis3,dis4,dis5,dis6,dis7,dis8,dis9,dis10,dis11,dis12,dis13,dis14,dis15,dis16);
//						//file<<dis1<<"\n";
//						//fwrite(dis1,   
//						std::ofstream outfile;
//						
//
//						
//						outfile.open(fileNames[videocount], std::ios_base::app);
//						outfile << zone_val[0] <<" "<<zone_val[1]<<" "<< zone_val[2]<<" "<<zone_val[3] <<" "<< zone_val[4] <<" "<<zone_val[5]<<" "<< zone_val[6] <<" "<<zone_val[7]<<" "<< zone_val[8] <<" "<<zone_val[9]<<" "<< zone_val[10] <<" "<<zone_val[11]<<" "<< zone_val[12] <<" "<<zone_val[13]<<" "<< zone_val[14] <<" "<<zone_val[15]<<" "<< dis1 <<" "<<dis2 <<" "<< dis3 <<" "<<dis4 <<" "<< dis5 <<" "<<dis6<<" "<< dis7 <<" "<<dis8<<" "<< dis9 <<" "<<dis10<<" "<< dis11 <<" "<<dis12<<" "<< dis13 <<" "<<dis14<<" "<< dis15 <<" "<<dis16<<"\n";
//							 
//							 
//		           
//				   
//}
//		cvShowImage(displaywindow, imagen_color);
//		//file.close();
//
//}
int main( int argc, char** argv )
{
	//printf("%f\n",dist1[0][2]);
		//Mat img=imread("D:/1st/img/a/1.png");		
        printf( "Vision based text recognition-Segmentation part\n"
                        "\tESC - quit the program\n");
		//for(int mainstart=0,mainend=8;mainend<63;mainstart=mainend+1,mainend=mainend+8)
		for(int videocount=0;videocount<=36;videocount++)
		{
		CvCapture* capture = cvCreateFileCapture( video_files[videocount] );
	IplImage* frame;
	int i=1;
	while(i)
	 {
		frame = cvQueryFrame( capture );
		if( !frame )
			break;
       	zoneextraction(frame,videocount);
		//featureextraction(frame,videocount);
		i++;
		
	}
		cvReleaseCapture( &capture );
		}
	/*std::fstream myfile("D:/0.txt", std::ios_base::in);

    int data[20];
	for(int i=0;i<20;i++)
	{
    myfile >> data[i];
    printf("%d\n",data[i]);
	}*/


		//_mm_pause();
		//cvShowImage(displaywindow,open_morf);
        //Main Loop
        for(;;)
        {
                int c;

                c = cvWaitKey(10);
                if( (char) c == 27 )
                        break;
                else if((char) c=='3')
					imshow(displaywindow,binary);
                        //cvShowImage(displaywindow, thresh);
                else if((char) c=='1')
                        cvShowImage(displaywindow, imagen);
                else if((char) c=='2')
                        cvShowImage(displaywindow, smooth);
                else if((char) c=='4')
                        cvShowImage(displaywindow, open_morf);
                else if((char) c=='r')
                        cvShowImage(displaywindow, imagen_color);
				else if ((char)c=='t')
				{
					
                
               
				
				}	

			}	
				
        
		//cvReleaseCapture( &capture );

        cvDestroyWindow(displaywindow);
		fclose(file);
        return 0;
}